//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RoguelikeSouls.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class TextData {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal TextData() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("RoguelikeSouls.Resources.TextData", typeof(TextData).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Distinctively shaped helm worn by the
        ///Knights of Catarina.
        ///
        ///Outside Catarina, it is often ridiculed for
        ///its onion-like shape, infuriating the proud
        ///knights, but the masterfully forged curved
        ///design makes it very effective for parrying.
        ///
        ///Distinctively shaped armor worn by the
        ///Knights of Catarina.
        ///
        ///Outside Catarina, it is often ridiculed for
        ///its onion-like shape, infuriating the proud
        ///knights, but the masterfully forged curved
        ///design makes it very effective for parrying.
        ///
        ///Distinctively shape [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AllArmorDescriptions {
            get {
                return ResourceManager.GetString("AllArmorDescriptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Catarina
        ///Paladin
        ///Dark
        ///Brigand
        ///Shadow
        ///Black Iron
        ///Smough&apos;s
        ///Channelers
        ///Six-Eyed
        ///Robe
        ///Gauntlets
        ///Waistcloth
        ///Favor
        ///Embraced
        ///Wise
        ///Glorious
        ///Vanquisher
        ///Explorer
        ///Stone
        ///Crystalline
        ///Sealer
        ///Crimson
        ///Velka
        ///Black
        ///Cleric
        ///Iron
        ///Armor
        ///Sun
        ///Iron
        ///Chain
        ///Leather
        ///Sunlight
        ///Maggot
        ///Thorns
        ///Standard
        ///Hard
        ///Sorcerer
        ///Tattered
        ///Cloth
        ///Heavy
        ///Pharis&apos;s
        ///Painting Guardian
        ///Ornstein&apos;s
        ///Eastern
        ///Xanthous
        ///Thief
        ///Priest&apos;s
        ///Holy
        ///Traveling
        ///Holy
        ///Knight
        ///Dusk
        ///Antiquated
        ///Witch
        ///Elite
        ///Wanderer
        ///Mage Smith
        ///Big
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AllArmorNames {
            get {
                return ResourceManager.GetString("AllArmorNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Demon Firesage
        ///Stray Demon
        ///Asylum Demon
        ///Capra Demon
        ///Taurus Demon
        ///Iron Golem
        ///Executioner Smough
        ///Crossbreed Priscilla
        ///Moonlight Butterfly
        ///Pinwheel
        ///Sanctuary Guardian
        ///Knight Artorias
        ///Manus, Father of the Abyss
        ///Black Dragon Kalameet
        ///Centipede Demon
        ///Great Grey Wolf Sif
        ///Gravelord Nito
        ///Ceaseless Discharge
        ///Gaping Dragon
        ///Dragon Slayer Ornstein
        ///Chaos Witch Quelaag
        ///Seath the Scaleless
        ///Dark Sun Gwyndolin
        ///Bell Gargoyle
        ///Gwyn, Lord of Cinder
        ///Four Kings
        ///Bed of Chaos
        ///Solaire
        ///Siegmeyer
        ///Sieglinde        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AllBossNames {
            get {
                return ResourceManager.GetString("AllBossNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Solaire
        ///Siegmeyer
        ///Sieglinde
        ///Petrus
        ///Rhea
        ///Ingward
        ///Crestfallen
        ///Anastacia
        ///Kingseeker Frampt
        ///Darkstalker Kaathe
        ///Darkmoon Knightess
        ///Gwynevere
        ///Gwyndolin
        ///Giant Blacksmith
        ///Crossbreed Priscilla
        ///Blacksmith Vamos
        ///Patches
        ///Elizabeth
        ///Marvelous Chester
        ///Ciaran
        ///Hawkeye Gough
        ///Havel the Rock
        ///Prince Ricard
        ///Vince
        ///Dusk
        ///Iron Tarkus
        ///Beatrice
        ///Maneater Mildred
        ///Leeroy
        ///Kirk
        ///King Jeremiah
        ///Lautrec
        ///Griggs
        ///Big Hat Logan
        ///Laurentius
        ///Quelana
        ///Eingyi
        ///Nico
        ///Undead
        ///Andre
        ///Oswald
        ///Shiva
        ///Alvina
        ///Domnhall
        ///Cata [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AllNPCNames {
            get {
                return ResourceManager.GetString("AllNPCNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Elementary sorcery.
        ///Fire soul arrow.
        ///Soul arrows inflict magic damage, making them
        ///effective against iron armor, tough scales,
        ///and other physically resilient materials.
        ///Sorcery which improves upon Soul Arrow.
        ///Fire strong soul arrow.
        ///At the Vinheim Dragon School,
        ///the acquisition of this spell marks an
        ///apprentice&apos;s coronation as a sorcerer.
        ///Soul sorcery emphasizing power.
        ///Fire heavy soul arrow.
        ///A more powerful, but also slower sorcery.
        ///Difficult to use due to a long cool down and
        ///a limitation on [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AllSpellDescriptions {
            get {
                return ResourceManager.GetString("AllSpellDescriptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Soul Arrow
        ///Great Soul Arrow
        ///Heavy Soul Arrow
        ///Great Heavy Soul Arrow
        ///Homing Soulmass
        ///Homing Crystal Soulmass
        ///Soul Spear
        ///Crystal Soul Spear
        ///Magic Weapon
        ///Great Magic Weapon
        ///Crystal Magic Weapon
        ///Magic Shield
        ///Strong Magic Shield
        ///Hidden Weapon
        ///Hidden Body
        ///Cast Light
        ///Hush
        ///Aural Decoy
        ///Repair
        ///Fall Control
        ///Chameleon
        ///Resist Curse
        ///Remedy
        ///White Dragon Breath
        ///Dark Orb
        ///Dark Bead
        ///Dark Fog
        ///Pursuers
        ///Fireball
        ///Fire Orb
        ///Great Fireball
        ///Firestorm
        ///Fire Tempest
        ///Fire Surge
        ///Fire Whip
        ///Combustion
        ///Gre [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AllSpellNames {
            get {
                return ResourceManager.GetString("AllSpellNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fire soul arrow
        ///Fire strong soul arrow
        ///Fire heavy soul arrow
        ///Fire strong heavy soul arrow
        ///Fire homing soulmass
        ///Fire homing crystal soulmass
        ///Fire piercing soul spear
        ///Fire piercing crystal soul spear
        ///Magic augmentation: right weapon
        ///High magic augmentation: right weapon
        ///High magic + crystallization: right weapon
        ///Magic augmentation: left shield
        ///High magic augmentation: left shield
        ///Turn right weapon invisible
        ///Turn body nearly invisible
        ///Cast a bright light upon surroundings
        ///Mask all noises of cas [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AllSpellSummaries {
            get {
                return ResourceManager.GetString("AllSpellSummaries", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///
        ///This standard small dagger has only a modest
        ///
        ///attack but can be jabbed in rapid succession,
        ///
        ///and is effective in critical hits such as
        ///
        ///after a parry or when stabbing in the back.
        ///
        ///With both slash and thrust attacks, this
        ///
        ///dagger is useful in various situations.
        ///
        ///
        ///
        ///This dagger is useful after parrying and is
        ///
        ///normally equipped in the left hand.
        ///
        ///
        ///
        ///A favorite of the knights of Carim, who are
        ///
        ///famous for fighting without a shield.
        ///
        ///
        ///
        ///The ghosts of New Londo clutch this wickedly
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AllWeaponDescriptions {
            get {
                return ResourceManager.GetString("AllWeaponDescriptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dagger
        ///Parrying Dagger
        ///Ghost Blade
        ///Bandit&apos;s Knife
        ///Priscilla&apos;s Dagger
        ///Shortsword
        ///Longsword
        ///Broadsword
        ///Broken Straight Sword
        ///Balder Side Sword
        ///Crystal Straight Sword
        ///Sunlight Straight Sword
        ///Barbed Straight Sword
        ///Silver Knight Straight Sword
        ///Astora&apos;s Straight Sword
        ///Darksword
        ///Drake Sword
        ///Straight Sword Hilt
        ///Bastard Sword
        ///Claymore
        ///Man-serpent Greatsword
        ///Flamberge
        ///Crystal Greatsword
        ///Stone Greatsword
        ///Greatsword of Artorias
        ///Great Lord Greatsword
        ///Moonlight Greatsword
        ///Black Knight Sword
        ///Gr [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AllWeaponNames {
            get {
                return ResourceManager.GetString("AllWeaponNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parrying
        ///Ghost
        ///Bandit&apos;s Knife
        ///Priscilla&apos;s
        ///Short
        ///Long
        ///Broad
        ///Broken
        ///Balder Side
        ///Crystal
        ///Sunlight
        ///Barbed
        ///Silver Knight
        ///Astora&apos;s
        ///Dark
        ///Drake
        ///Hilt
        ///Bastard
        ///Claymore
        ///Man-serpent
        ///Flamberge
        ///Crystal
        ///Stone
        ///Artorias
        ///Lord
        ///Moonlight
        ///Black Knight
        ///Artorias
        ///Artorias
        ///Lord
        ///Zweihander
        ///Demon
        ///Dragon
        ///Black Knight
        ///Scimitar
        ///Falchion
        ///Shotel
        ///Jagged Ghost
        ///Painting Guardian
        ///Quelaag&apos;s Fury
        ///Server
        ///Murakumo
        ///Gravelord
        ///Uchigatana
        ///Washing Pole
        ///Iaito
        ///Chaos
        ///Mail Breaker
        ///Rapier
        ///Estoc
        ///Velka&apos;s Rapi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AllWeaponNamesNoSuffix {
            get {
                return ResourceManager.GetString("AllWeaponNamesNoSuffix", resourceCulture);
            }
        }
    }
}
